// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/betawulan/sahamrakyat/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderItemRepository is an autogenerated mock type for the OrderItemRepository type
type OrderItemRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderItem
func (_m *OrderItemRepository) Create(ctx context.Context, orderItem model.OrderItem) (model.OrderItem, error) {
	ret := _m.Called(ctx, orderItem)

	var r0 model.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItem) model.OrderItem); ok {
		r0 = rf(ctx, orderItem)
	} else {
		r0 = ret.Get(0).(model.OrderItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderItem) error); ok {
		r1 = rf(ctx, orderItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, ID
func (_m *OrderItemRepository) Publish(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, filter
func (_m *OrderItemRepository) Read(ctx context.Context, filter model.OrderItemFilter) ([]model.OrderItem, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItemFilter) []model.OrderItem); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderItemFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByID provides a mock function with given fields: ctx, ID
func (_m *OrderItemRepository) ReadByID(ctx context.Context, ID int64) (model.OrderItem, error) {
	ret := _m.Called(ctx, ID)

	var r0 model.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.OrderItem); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(model.OrderItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnPublish provides a mock function with given fields: ctx, ID
func (_m *OrderItemRepository) UnPublish(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ID, orderItem
func (_m *OrderItemRepository) Update(ctx context.Context, ID int64, orderItem model.OrderItem) error {
	ret := _m.Called(ctx, ID, orderItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.OrderItem) error); ok {
		r0 = rf(ctx, ID, orderItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderItemRepository creates a new instance of OrderItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemRepository(t mockConstructorTestingTNewOrderItemRepository) *OrderItemRepository {
	mock := &OrderItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
